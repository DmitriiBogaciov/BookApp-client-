'use client';

import { Editor, EditorState, convertFromRaw, convertToRaw } from 'draft-js';
import 'draft-js/dist/Draft.css';
import { useState, useEffect, useRef } from 'react';
import socket from '@/app/utils/socket';
import CreateAutocompletePlugin from './menu-editor-draft/autocomplete';


interface DraftEditorProps {
    block: { content: any; _id: string; pageId: string }; // ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è socket –æ–ø–µ—Ä–∞—Ü–∏–π
}

export default function DraftEditor({ block }: DraftEditorProps) {
    const parseContent = (content: any) => {
        try {
            const rawContent = typeof content === 'string' ? JSON.parse(content) : content;
            return EditorState.createWithContent(convertFromRaw(rawContent));
        } catch (error) {
            console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å block.content:", error);
            return EditorState.createEmpty();
        }
    };

    const [editorState, setEditorState] = useState(() =>
        block.content ? parseContent(block.content) : EditorState.createEmpty()
    );
    
    const autocompletePlugin = CreateAutocompletePlugin(setEditorState, () => editorState);

    const [isLocalUpdate, setIsLocalUpdate] = useState(false);
    const [isServerUpdate, setIsServerUpdate] = useState(false) // –î–æ–±–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const previousContentRef = useRef<string | null>(null);

    useEffect(() => {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞
        const handleBlockUpdate = (updatedBlock: { _id: string; content: string }) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫ —Ç–µ–∫—É—â–µ–º—É –±–ª–æ–∫—É
            if (updatedBlock._id !== block._id) {
                return; // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–∞—à –±–ª–æ–∫ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            }
    
            // –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞
            if (isLocalUpdate) {
                console.log(`üö´ –õ–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –±–ª–æ–∫–µ ${block._id}, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º`);
                return;
            }
    
            setIsServerUpdate(true);
    
            console.log(`üì© –ü—Ä–∏—à–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –±–ª–æ–∫–∞ ${updatedBlock._id}`);
            console.log("‚ö° –ö–æ–Ω—Ç–µ–Ω—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞:", updatedBlock.content);
            setEditorState(parseContent(updatedBlock.content)); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        };
    
        socket.on('block_updated', handleBlockUpdate);
    
        return () => {
            socket.off('block_updated', handleBlockUpdate);
        };
    }, [isLocalUpdate, block._id]);

    useEffect(() => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        if(isServerUpdate) {
            setIsServerUpdate(false)
            return
        }
        const timeout = setTimeout(() => {
            const rawContent = JSON.stringify(convertToRaw(editorState.getCurrentContent()));

            if (previousContentRef.current === rawContent) return;

            previousContentRef.current = rawContent;
            setIsLocalUpdate(true); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è

            socket.emit('block_update', {
                blockId: block._id,
                pageId: block.pageId,
                content: rawContent,
            });

            // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            setTimeout(() => {
                setIsLocalUpdate(false);
            }, 1000); // –§–ª–∞–≥ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É (—ç—Ç–æ –≤—Ä–µ–º—è –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
        }, 500); // –¢–∞–π–º–∞—É—Ç –Ω–∞ 500 –º—Å

        return () => clearTimeout(timeout);
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [editorState]);

    return (
        <div className='min-h-[50px] w-full'>
            <Editor
                editorState={editorState}
                onChange={autocompletePlugin.onChange}
                placeholder="Start to type... Draft.js"
                handleBeforeInput={autocompletePlugin.handleBeforeInput}
                handleKeyCommand={autocompletePlugin.handleKeyCommand}
                keyBindingFn={autocompletePlugin.keyBindingFn}
                ref={autocompletePlugin.ref}
            />
            {autocompletePlugin.renderSuggestions()}
        </div>
    );
}
